/* eslint-disable */
// import path from 'path'
import plugins from 'gulp-load-plugins'
import yargs from 'yargs'
import browser from 'browser-sync'
import gulp from 'gulp'
import panini from 'panini'
import rimraf from 'rimraf'
import sherpa from 'style-sherpa'
import yaml from 'js-yaml'
import fs from 'fs'
import webpackStream from 'webpack-stream'
import webpack2 from 'webpack'
import named from 'vinyl-named'
import sitemap from 'gulp-sitemap'
import through from 'through2'
import cachebuster from 'gulp-cache-bust'
import compression  from 'compression'
// import gulpAxe from 'gulp-axe-webdriver'

const webpackConfig = require('./webpack.config.js')

// Load all Gulp plugins into one variable
const $ = plugins()

// Check for --production flag
const PRODUCTION = !!yargs.argv.production

// Load settings from settings.yml
const {COMPATIBILITY, PORT, UNCSS_OPTIONS, PATHS} = loadConfig()

function loadConfig () {
  const ymlFile = fs.readFileSync('config.yml', 'utf8')
  return yaml.load(ymlFile)
}

// Delete the "dist" folder
// This happens every time a build starts
function clean (done) {
  rimraf(PATHS.dist, done)
}

// Copy files out of the assets folder
// This task skips over the "img", "js", and "scss" folders, which are parsed separately
function copy () {
  gulp.src(PATHS.rootassets).pipe(gulp.dest(PATHS.dist))
  gulp.src(PATHS.admin).pipe(gulp.dest(`${PATHS.dist}/admin`))

  return gulp.src(PATHS.assets).pipe(gulp.dest(`${PATHS.dist}/assets`))
}

// Copy page templates into finished HTML files
function pages () {
  return gulp.src('src/pages/**/*.{html,hbs,handlebars}')
    .pipe(panini({
      root: 'src/pages/',
      layouts: 'src/layouts/',
      partials: 'src/partials/',
      data: 'src/data/',
      helpers: 'src/helpers/'
    }))
    .pipe(gulp.dest(PATHS.dist))
}

// Load updated HTML templates and partials into Panini
function resetPages (done) {
  panini.refresh()
  done()
}

/**
 * Generate many pages for many speakers defined in data/speakers.json
 * @returns {*}
 */
function cachebusting () {
  return gulp
    .src(`${PATHS.dist}/*.html`)
    .pipe(
      cachebuster({
        type: 'timestamp'
      })
    )
    .pipe(gulp.dest(PATHS.dist))
}

// -------------------------------------
// Task: Sitemap
// Generate sitemap.xml based on HTML
// pages generated by panini
// *** must be called after panini task
// -------------------------------------
function sitemapxml () {
  return gulp
    .src('static/*.html', {read: false})
    .pipe(
      sitemap({
        siteUrl: 'http://marcellop.com',
        spacing: '  '
      })
    )
    .pipe(gulp.dest(PATHS.dist))
}

// Generate a style guide from the Markdown content and HTML template in styleguide/
function styleGuide (done) {
  sherpa('src/styleguide/index.md', {
    output: PATHS.dist + '/styleguide.html',
    template: 'src/styleguide/template.html'
  }, done)
}

// Compile Sass into CSS
// In production, the CSS is compressed
function sass () {
  // Using MarcelloP TypoStart
  return gulp.src('src/assets/mpss/app.scss')
    .pipe($.sourcemaps.init())
    .pipe($.sass({
      // includePaths: PATHS.sass
    })
      .on('error', $.sass.logError))
    .pipe($.autoprefixer({
      browsers: COMPATIBILITY
    }))
    // Comment in the pipe below to run UnCSS in production
    //.pipe($.if(PRODUCTION, $.uncss(UNCSS_OPTIONS)))
    .pipe($.if(PRODUCTION, $.cleanCss({compatibility: 'ie9'})))
    .pipe($.if(!PRODUCTION, $.sourcemaps.write()))
    .pipe(gulp.dest(PATHS.dist + '/assets/css'))
    .pipe(browser.reload({stream: true}))

  // this is for Foundation
  // return gulp.src('src/assets/scss/app.scss')
  //   .pipe($.sourcemaps.init())
  //   .pipe($.sass({
  //     includePaths: PATHS.sass
  //   })
  //     .on('error', $.sass.logError))
  //   .pipe($.autoprefixer({
  //     browsers: COMPATIBILITY
  //   }))
  //   // Comment in the pipe below to run UnCSS in production
  //   //.pipe($.if(PRODUCTION, $.uncss(UNCSS_OPTIONS)))
  //   .pipe($.if(PRODUCTION, $.cleanCss({compatibility: 'ie9'})))
  //   .pipe($.if(!PRODUCTION, $.sourcemaps.write()))
  //   .pipe(gulp.dest(PATHS.dist + '/assets/css'))
  //   .pipe(browser.reload({stream: true}))
}

// Combine JavaScript into one file
// In production, the file is minified
function javascript () {
  return (
    gulp
      .src(PATHS.entries)
      .pipe(named())
      // .pipe($.sourcemaps.init())
      .pipe(webpackStream(webpackConfig, webpack2))
      .pipe($.sourcemaps.init({loadMaps: true}))
      .pipe(
        through.obj(function (file, enc, cb) {
          // Dont pipe through any source map files as it will be handled
          // by gulp-sourcemaps
          const isSourceMap = /\.mapplugin/.test(file.path)
          if (!isSourceMap) {
            this.push(file)
          }

          cb()
        })
      )
      // .pipe($.if(PRODUCTION, $.uglify()
      //   .on('error', e => {
      //     // eslint-disable-next-line no-console
      //     console.log(e);
      //   })
      // ))
      .pipe($.if(!PRODUCTION, $.sourcemaps.write('.')))
      .pipe(gulp.dest(`${PATHS.dist}/assets/js`))
  )
}

// Copy images to the "dist" folder
// In production, the images are compressed
function images () {
  return gulp.src('src/assets/img/**/*')
    .pipe($.if(PRODUCTION, $.imagemin({
      progressive: true
    })))
    .pipe(gulp.dest(PATHS.dist + '/assets/img'))
}
//
// function axe (done) {
//   const options = {
//     browser: 'chrome',
//     folderOutputReport: 'dist',
//     saveOutputIn: 'axe-a11y.json',
//     urls: ['dist/index.html']
//   }
//
//   gulpAxe(options, done)
//
//   done()
// }

// Start a server with BrowserSync to preview the site in
function server (done) {
  browser.init({
    server: {
      baseDir: PATHS.dist,
      middleware: [compression()]
    },
    port: PORT,
    // browser: browser === undefined ? 'google chrome' : browser,
    browser: 'google chrome',
    https: true
  })
  done()
}

// Reload the browser with BrowserSync
function reload (done) {
  browser.reload()
  done()
}

// Watch for changes to static assets, pages, Sass, and JavaScript
function watch () {
  gulp.watch(PATHS.assets, copy)
  gulp.watch('src/pages/**/*.html').on('all', gulp.series(pages, browser.reload))
  gulp.watch('src/{layouts,partials}/**/*.hbs').on('all', gulp.series(resetPages, pages, browser.reload))
  // gulp.watch('src/assets/scss/**/*.scss').on('all', sass)
  gulp.watch('src/assets/mpss/**/*.scss').on('all', sass)
  gulp.watch('src/assets/js/**/*.js').on('all', gulp.series(javascript, browser.reload))
  gulp.watch('src/assets/img/**/*').on('all', gulp.series(images, browser.reload))
  gulp.watch('src/styleguide/**').on('all', gulp.series(styleGuide, browser.reload))
}

// Build the "dist" folder by running all of the below tasks
// gulp.task('build',
//   gulp.series(clean, gulp.parallel(pages, sass, javascript, images, copy), styleGuide));

gulp.task(
  'build',
  gulp.series(
    clean,
    pages,
    gulp.parallel(sass, javascript, images, copy),
    cachebusting,
    // axe,
    sitemapxml,
    styleGuide
  )
)

// Build the site, run the server, and watch for file changes
gulp.task('default', gulp.series('build', server, watch))
